import React, { useState, useEffect } from 'react';

import { Loader, Card, FormField } from '../components';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);

      try {
        const response = await fetch('https://artofficial.onrender.com/api/v1/post', {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
        });

        if (!response.ok) {
          throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        setAllPosts(result.data.reverse());
      } catch (err) {
        console.error('Error fetching posts:', err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    const query = e.target.value.toLowerCase();
    const trimmedQuery = query.trim();
    setSearchText(query);

    clearTimeout(searchTimeout);

    setSearchTimeout(
      setTimeout(() => {
        if (trimmedQuery === '') {
          setSearchedResults(null);
          return;
        }

        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(trimmedQuery) ||
            item.prompt.toLowerCase().includes(trimmedQuery)
        );

        setSearchedResults(searchResult);
      }, 500)
    );
  };

  const renderData = searchText ? searchedResults : allPosts;
  const renderTitle = searchText ? "No Search Results Found" : "No posts found";

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">Community Showcase</h1>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunning images generated by DALL-E AI!
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search posts"
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing results for <span className="text-[#222328]">{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              <RenderCards data={renderData} title={renderTitle} />
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;